// Code generated by protoc-gen-go. DO NOT EDIT.
// source: im.proto

/*
Package bean is a generated protocol buffer package.

It is generated from these files:
	im.proto

It has these top-level messages:
	SingleMsg
	GroupMsg
	MsgSendRes
	MsgReq
	MsgReqRes
	LoginReq
	LoginRes
	MsgReqAck
	MsgInform
	TcpProtPkg
	UdpProtPkg
*/
package bean

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PkgTypeEnum int32

const (
	// proto3必须要有这个0,但实际用不到
	PkgTypeEnum_UNKNOWN PkgTypeEnum = 0
	// 登录包
	PkgTypeEnum_LOGIN_REQ PkgTypeEnum = 1
	// 心跳包
	PkgTypeEnum_PING PkgTypeEnum = 2
	// 心跳响应包
	PkgTypeEnum_PONG PkgTypeEnum = 3
	// 消息请求包
	PkgTypeEnum_MSG_REQ PkgTypeEnum = 4
	// 新消息通知包
	PkgTypeEnum_MSG_INFORM PkgTypeEnum = 5
	// 消息请求响应包
	PkgTypeEnum_MSG_REQ_RES PkgTypeEnum = 6
	// 请求ack包
	PkgTypeEnum_MSG_REQ_ACK PkgTypeEnum = 7
	// 单消息发送包
	PkgTypeEnum_MSG_SEND_SINGLE PkgTypeEnum = 8
	// 群消息发送包
	PkgTypeEnum_MSG_SEND_GROUP PkgTypeEnum = 9
	// 消息发送响应包
	PkgTypeEnum_MSG_SEND_RES PkgTypeEnum = 10
	// 登录响应包
	PkgTypeEnum_LOGIN_RES PkgTypeEnum = 11
)

var PkgTypeEnum_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "LOGIN_REQ",
	2:  "PING",
	3:  "PONG",
	4:  "MSG_REQ",
	5:  "MSG_INFORM",
	6:  "MSG_REQ_RES",
	7:  "MSG_REQ_ACK",
	8:  "MSG_SEND_SINGLE",
	9:  "MSG_SEND_GROUP",
	10: "MSG_SEND_RES",
	11: "LOGIN_RES",
}
var PkgTypeEnum_value = map[string]int32{
	"UNKNOWN":         0,
	"LOGIN_REQ":       1,
	"PING":            2,
	"PONG":            3,
	"MSG_REQ":         4,
	"MSG_INFORM":      5,
	"MSG_REQ_RES":     6,
	"MSG_REQ_ACK":     7,
	"MSG_SEND_SINGLE": 8,
	"MSG_SEND_GROUP":  9,
	"MSG_SEND_RES":    10,
	"LOGIN_RES":       11,
}

func (x PkgTypeEnum) String() string {
	return proto.EnumName(PkgTypeEnum_name, int32(x))
}
func (PkgTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 消息类型
type MsgTypeEnum int32

const (
	MsgTypeEnum_DEFAULT MsgTypeEnum = 0
	// 文本
	MsgTypeEnum_TEXT MsgTypeEnum = 1
	// 表情
	MsgTypeEnum_EMOJI MsgTypeEnum = 2
	// 这个说明这个是个指令，客户端可以解析具体的消息内容做相应的操作
	MsgTypeEnum_PUSHCMD MsgTypeEnum = 3
	// 图片应该也是有分片的，这个和语音一样是直接上传到存储消息发地址还是分片通过通道待研究
	MsgTypeEnum_IMG MsgTypeEnum = 4
	// 消息分片
	MsgTypeEnum_VOICE MsgTypeEnum = 5
	// 语音描述
	MsgTypeEnum_VOICE_DES MsgTypeEnum = 6
)

var MsgTypeEnum_name = map[int32]string{
	0: "DEFAULT",
	1: "TEXT",
	2: "EMOJI",
	3: "PUSHCMD",
	4: "IMG",
	5: "VOICE",
	6: "VOICE_DES",
}
var MsgTypeEnum_value = map[string]int32{
	"DEFAULT":   0,
	"TEXT":      1,
	"EMOJI":     2,
	"PUSHCMD":   3,
	"IMG":       4,
	"VOICE":     5,
	"VOICE_DES": 6,
}

func (x MsgTypeEnum) String() string {
	return proto.EnumName(MsgTypeEnum_name, int32(x))
}
func (MsgTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 设备类型
type DeviceTypeEnum int32

const (
	DeviceTypeEnum_TMP     DeviceTypeEnum = 0
	DeviceTypeEnum_ANDROID DeviceTypeEnum = 1
	DeviceTypeEnum_IOS     DeviceTypeEnum = 2
	DeviceTypeEnum_PC      DeviceTypeEnum = 3
)

var DeviceTypeEnum_name = map[int32]string{
	0: "TMP",
	1: "ANDROID",
	2: "IOS",
	3: "PC",
}
var DeviceTypeEnum_value = map[string]int32{
	"TMP":     0,
	"ANDROID": 1,
	"IOS":     2,
	"PC":      3,
}

func (x DeviceTypeEnum) String() string {
	return proto.EnumName(DeviceTypeEnum_name, int32(x))
}
func (DeviceTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 单聊消息
type SingleMsg struct {
	// 发送者账号id
	FromUserId int64 `protobuf:"varint,1,opt,name=fromUserId" json:"fromUserId,omitempty"`
	// 接收者账号id
	ToUserId int64 `protobuf:"varint,2,opt,name=toUserId" json:"toUserId,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	// 客户端发送消息时间戳
	SendTimestamp int64 `protobuf:"varint,4,opt,name=sendTimestamp" json:"sendTimestamp,omitempty"`
	// 服务器接收消息时间戳
	ReceiveTimestamp int64 `protobuf:"varint,5,opt,name=receiveTimestamp" json:"receiveTimestamp,omitempty"`
	// 消息类型文本、图片切片、图片结束、语音切片、语音结束
	MsgType int32 `protobuf:"varint,6,opt,name=msgType" json:"msgType,omitempty"`
	// 消息序号
	SrlNo int64 `protobuf:"varint,7,opt,name=srlNo" json:"srlNo,omitempty"`
	// 消息的唯一id，由客户端负责生成
	MsgId string `protobuf:"bytes,8,opt,name=msgId" json:"msgId,omitempty"`
	// 发送消息的设备类型
	DeviceType int32 `protobuf:"varint,9,opt,name=deviceType" json:"deviceType,omitempty"`
}

func (m *SingleMsg) Reset()                    { *m = SingleMsg{} }
func (m *SingleMsg) String() string            { return proto.CompactTextString(m) }
func (*SingleMsg) ProtoMessage()               {}
func (*SingleMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SingleMsg) GetFromUserId() int64 {
	if m != nil {
		return m.FromUserId
	}
	return 0
}

func (m *SingleMsg) GetToUserId() int64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

func (m *SingleMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SingleMsg) GetSendTimestamp() int64 {
	if m != nil {
		return m.SendTimestamp
	}
	return 0
}

func (m *SingleMsg) GetReceiveTimestamp() int64 {
	if m != nil {
		return m.ReceiveTimestamp
	}
	return 0
}

func (m *SingleMsg) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *SingleMsg) GetSrlNo() int64 {
	if m != nil {
		return m.SrlNo
	}
	return 0
}

func (m *SingleMsg) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *SingleMsg) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

// 群聊消息
type GroupMsg struct {
	// 发送者账号id
	FromUserId int64 `protobuf:"varint,1,opt,name=fromUserId" json:"fromUserId,omitempty"`
	// 接收群id
	ToGroupId int64 `protobuf:"varint,2,opt,name=toGroupId" json:"toGroupId,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	// 客户端发送消息时间戳
	SendTimestamp int64 `protobuf:"varint,4,opt,name=sendTimestamp" json:"sendTimestamp,omitempty"`
	// 服务器接收消息时间戳
	ReceiveTimestamp int64 `protobuf:"varint,5,opt,name=receiveTimestamp" json:"receiveTimestamp,omitempty"`
	// 消息类型文本、图片切片、图片结束、语音切片、语音结束
	MsgType int32 `protobuf:"varint,6,opt,name=msgType" json:"msgType,omitempty"`
	// 消息序号
	SrlNo int64 `protobuf:"varint,7,opt,name=srlNo" json:"srlNo,omitempty"`
	// 消息的唯一id，由客户端负责生成
	MsgId string `protobuf:"bytes,8,opt,name=msgId" json:"msgId,omitempty"`
	// 发送消息的设备类型
	DeviceType int32 `protobuf:"varint,9,opt,name=deviceType" json:"deviceType,omitempty"`
}

func (m *GroupMsg) Reset()                    { *m = GroupMsg{} }
func (m *GroupMsg) String() string            { return proto.CompactTextString(m) }
func (*GroupMsg) ProtoMessage()               {}
func (*GroupMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupMsg) GetFromUserId() int64 {
	if m != nil {
		return m.FromUserId
	}
	return 0
}

func (m *GroupMsg) GetToGroupId() int64 {
	if m != nil {
		return m.ToGroupId
	}
	return 0
}

func (m *GroupMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GroupMsg) GetSendTimestamp() int64 {
	if m != nil {
		return m.SendTimestamp
	}
	return 0
}

func (m *GroupMsg) GetReceiveTimestamp() int64 {
	if m != nil {
		return m.ReceiveTimestamp
	}
	return 0
}

func (m *GroupMsg) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *GroupMsg) GetSrlNo() int64 {
	if m != nil {
		return m.SrlNo
	}
	return 0
}

func (m *GroupMsg) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *GroupMsg) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

// 消息发送响应*
type MsgSendRes struct {
	// 消息id
	MsgId string `protobuf:"bytes,1,opt,name=msgId" json:"msgId,omitempty"`
	// 消息发送是否成功的标志
	Flag bool `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	// 服务器响应时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MsgSendRes) Reset()                    { *m = MsgSendRes{} }
func (m *MsgSendRes) String() string            { return proto.CompactTextString(m) }
func (*MsgSendRes) ProtoMessage()               {}
func (*MsgSendRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MsgSendRes) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *MsgSendRes) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *MsgSendRes) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 消息请求
type MsgReq struct {
	// 请求者消息id
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	// 请求者客户端保存的已经读到的消息序号
	SrlNo int64 `protobuf:"varint,2,opt,name=srlNo" json:"srlNo,omitempty"`
	// 请求者读取多少条
	PageSize int32 `protobuf:"varint,3,opt,name=pageSize" json:"pageSize,omitempty"`
	// 当前页
	CurrentPage int32 `protobuf:"varint,4,opt,name=currentPage" json:"currentPage,omitempty"`
	// 请求时间戳
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MsgReq) Reset()                    { *m = MsgReq{} }
func (m *MsgReq) String() string            { return proto.CompactTextString(m) }
func (*MsgReq) ProtoMessage()               {}
func (*MsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MsgReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgReq) GetSrlNo() int64 {
	if m != nil {
		return m.SrlNo
	}
	return 0
}

func (m *MsgReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *MsgReq) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *MsgReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 消息请求响应
type MsgReqRes struct {
	// 本次读取到的序号
	SrlNo int64 `protobuf:"varint,1,opt,name=srlNo" json:"srlNo,omitempty"`
	// 消息列表
	Msgs []*SingleMsg `protobuf:"bytes,2,rep,name=msgs" json:"msgs,omitempty"`
	// 响应时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MsgReqRes) Reset()                    { *m = MsgReqRes{} }
func (m *MsgReqRes) String() string            { return proto.CompactTextString(m) }
func (*MsgReqRes) ProtoMessage()               {}
func (*MsgReqRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MsgReqRes) GetSrlNo() int64 {
	if m != nil {
		return m.SrlNo
	}
	return 0
}

func (m *MsgReqRes) GetMsgs() []*SingleMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *MsgReqRes) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 登录请求
type LoginReq struct {
	UserId     int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	DeviceType int32 `protobuf:"varint,2,opt,name=deviceType" json:"deviceType,omitempty"`
	// 请求时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// 用户token
	Token string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LoginReq) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *LoginReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LoginReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 登录响应
type LoginRes struct {
	// 登录是否成功标识
	Flag bool `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
	// 服务器响应时间戳
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *LoginRes) Reset()                    { *m = LoginRes{} }
func (m *LoginRes) String() string            { return proto.CompactTextString(m) }
func (*LoginRes) ProtoMessage()               {}
func (*LoginRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LoginRes) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *LoginRes) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 消息请求响应ack
type MsgReqAck struct {
	// 用户id
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	// 本地已经拉取到的消息序号
	SrlNo int64 `protobuf:"varint,2,opt,name=srlNo" json:"srlNo,omitempty"`
	// ack时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MsgReqAck) Reset()                    { *m = MsgReqAck{} }
func (m *MsgReqAck) String() string            { return proto.CompactTextString(m) }
func (*MsgReqAck) ProtoMessage()               {}
func (*MsgReqAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MsgReqAck) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgReqAck) GetSrlNo() int64 {
	if m != nil {
		return m.SrlNo
	}
	return 0
}

func (m *MsgReqAck) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 新消息通知
type MsgInform struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	// 最新的消息序号
	SrlNo int64 `protobuf:"varint,2,opt,name=srlNo" json:"srlNo,omitempty"`
	// 通知时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MsgInform) Reset()                    { *m = MsgInform{} }
func (m *MsgInform) String() string            { return proto.CompactTextString(m) }
func (*MsgInform) ProtoMessage()               {}
func (*MsgInform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MsgInform) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgInform) GetSrlNo() int64 {
	if m != nil {
		return m.SrlNo
	}
	return 0
}

func (m *MsgInform) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Tcp消息包
type TcpProtPkg struct {
	// 包类型PacTypeEnum里的值
	PkgType int32 `protobuf:"varint,1,opt,name=pkgType" json:"pkgType,omitempty"`
	// 协议内容，也就是消息内容
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *TcpProtPkg) Reset()                    { *m = TcpProtPkg{} }
func (m *TcpProtPkg) String() string            { return proto.CompactTextString(m) }
func (*TcpProtPkg) ProtoMessage()               {}
func (*TcpProtPkg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TcpProtPkg) GetPkgType() int32 {
	if m != nil {
		return m.PkgType
	}
	return 0
}

func (m *TcpProtPkg) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// udp消息包
type UdpProtPkg struct {
	// 包类型
	PkgType int32 `protobuf:"varint,1,opt,name=pkgType" json:"pkgType,omitempty"`
	// 协议内容，也就是消息内容
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// 逻辑层发到接入层的消息，要有userId找寻长连接通道
	ToUserId int64 `protobuf:"varint,3,opt,name=toUserId" json:"toUserId,omitempty"`
}

func (m *UdpProtPkg) Reset()                    { *m = UdpProtPkg{} }
func (m *UdpProtPkg) String() string            { return proto.CompactTextString(m) }
func (*UdpProtPkg) ProtoMessage()               {}
func (*UdpProtPkg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UdpProtPkg) GetPkgType() int32 {
	if m != nil {
		return m.PkgType
	}
	return 0
}

func (m *UdpProtPkg) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UdpProtPkg) GetToUserId() int64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

func init() {
	proto.RegisterType((*SingleMsg)(nil), "bean.SingleMsg")
	proto.RegisterType((*GroupMsg)(nil), "bean.GroupMsg")
	proto.RegisterType((*MsgSendRes)(nil), "bean.MsgSendRes")
	proto.RegisterType((*MsgReq)(nil), "bean.MsgReq")
	proto.RegisterType((*MsgReqRes)(nil), "bean.MsgReqRes")
	proto.RegisterType((*LoginReq)(nil), "bean.LoginReq")
	proto.RegisterType((*LoginRes)(nil), "bean.LoginRes")
	proto.RegisterType((*MsgReqAck)(nil), "bean.MsgReqAck")
	proto.RegisterType((*MsgInform)(nil), "bean.MsgInform")
	proto.RegisterType((*TcpProtPkg)(nil), "bean.TcpProtPkg")
	proto.RegisterType((*UdpProtPkg)(nil), "bean.UdpProtPkg")
	proto.RegisterEnum("bean.PkgTypeEnum", PkgTypeEnum_name, PkgTypeEnum_value)
	proto.RegisterEnum("bean.MsgTypeEnum", MsgTypeEnum_name, MsgTypeEnum_value)
	proto.RegisterEnum("bean.DeviceTypeEnum", DeviceTypeEnum_name, DeviceTypeEnum_value)
}

func init() { proto.RegisterFile("im.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xad, 0xed, 0x38, 0xb1, 0x6f, 0xfa, 0x31, 0x9a, 0xf7, 0xf4, 0x64, 0x55, 0x4f, 0x28, 0x0a,
	0x2c, 0xa2, 0x2c, 0xba, 0x80, 0x05, 0x1b, 0x16, 0x44, 0x89, 0x6b, 0x4c, 0xe3, 0x0f, 0xc6, 0x0e,
	0x65, 0x81, 0x14, 0xa5, 0xc9, 0xd4, 0x8a, 0x52, 0x7f, 0xe0, 0x71, 0x2a, 0xc1, 0xcf, 0x60, 0x07,
	0x3f, 0x88, 0xdf, 0x85, 0x66, 0x9c, 0x38, 0x4e, 0x11, 0x05, 0x04, 0x2b, 0x76, 0x73, 0xce, 0x5c,
	0x9f, 0x7b, 0xef, 0xb9, 0xb9, 0x13, 0xd0, 0x96, 0xf1, 0x59, 0x96, 0xa7, 0x45, 0x8a, 0x1b, 0x57,
	0x74, 0x96, 0x74, 0x3f, 0xc9, 0xa0, 0x07, 0xcb, 0x24, 0xba, 0xa1, 0x0e, 0x8b, 0xf0, 0x03, 0x80,
	0xeb, 0x3c, 0x8d, 0x27, 0x8c, 0xe6, 0xf6, 0xc2, 0x90, 0x3a, 0x52, 0x4f, 0x21, 0x35, 0x06, 0x9f,
	0x82, 0x56, 0xa4, 0x9b, 0x5b, 0x59, 0xdc, 0x56, 0x18, 0x1b, 0xd0, 0x9a, 0xa7, 0x49, 0x41, 0x93,
	0xc2, 0x50, 0x3a, 0x52, 0x4f, 0x27, 0x5b, 0x88, 0x1f, 0xc1, 0x11, 0xa3, 0xc9, 0x22, 0x5c, 0xc6,
	0x94, 0x15, 0xb3, 0x38, 0x33, 0x1a, 0xe2, 0xd3, 0x7d, 0x12, 0xf7, 0x01, 0xe5, 0x74, 0x4e, 0x97,
	0xb7, 0x74, 0x17, 0xa8, 0x8a, 0xc0, 0x6f, 0x78, 0x9e, 0x2b, 0x66, 0x51, 0xf8, 0x3e, 0xa3, 0x46,
	0xb3, 0x23, 0xf5, 0x54, 0xb2, 0x85, 0xf8, 0x5f, 0x50, 0x59, 0x7e, 0xe3, 0xa6, 0x46, 0x4b, 0x7c,
	0x5a, 0x02, 0xce, 0xc6, 0x2c, 0xb2, 0x17, 0x86, 0x26, 0x2a, 0x2b, 0x01, 0xef, 0x76, 0x41, 0x6f,
	0x97, 0x73, 0x2a, 0x84, 0x74, 0x21, 0x54, 0x63, 0xba, 0x9f, 0x65, 0xd0, 0xac, 0x3c, 0x5d, 0x67,
	0x3f, 0x63, 0xcd, 0xff, 0xa0, 0x17, 0xa9, 0x88, 0xae, 0xbc, 0xd9, 0x11, 0x7f, 0xa1, 0x39, 0x21,
	0x80, 0xc3, 0xa2, 0x80, 0x26, 0x0b, 0x42, 0xd9, 0x4e, 0x43, 0xaa, 0x6b, 0x60, 0x68, 0x5c, 0xdf,
	0xcc, 0x22, 0x61, 0x87, 0x46, 0xc4, 0x59, 0xf8, 0x54, 0xb5, 0xa0, 0x6c, 0x7c, 0xda, 0x12, 0xdd,
	0x8f, 0x12, 0x34, 0x1d, 0x16, 0x11, 0xfa, 0x0e, 0xff, 0x07, 0xcd, 0x75, 0xdd, 0xec, 0x0d, 0xda,
	0x35, 0x21, 0xd7, 0x9b, 0x38, 0x05, 0x2d, 0x9b, 0x45, 0x34, 0x58, 0x7e, 0xa0, 0x42, 0x55, 0x25,
	0x15, 0xc6, 0x1d, 0x68, 0xcf, 0xd7, 0x79, 0x4e, 0x93, 0xc2, 0x9f, 0x45, 0x54, 0x18, 0xac, 0x92,
	0x3a, 0xb5, 0x5f, 0x94, 0x7a, 0xb7, 0xa8, 0x05, 0xe8, 0x65, 0x4d, 0x9b, 0x4e, 0xcb, 0xf4, 0x52,
	0x3d, 0xfd, 0x43, 0x68, 0xc4, 0x2c, 0x62, 0x86, 0xdc, 0x51, 0x7a, 0xed, 0xc7, 0x27, 0x67, 0x7c,
	0xb7, 0xce, 0xaa, 0xbd, 0x22, 0xe2, 0xf2, 0x07, 0xad, 0xdf, 0x82, 0x36, 0x4e, 0xa3, 0x65, 0x72,
	0x5f, 0xef, 0xfb, 0x43, 0x91, 0xef, 0x0e, 0xe5, 0xfe, 0x0c, 0xbc, 0xf4, 0x22, 0x5d, 0xd1, 0x44,
	0x38, 0xa0, 0x93, 0x12, 0x74, 0x9f, 0x55, 0x79, 0x59, 0x35, 0x30, 0xe9, 0x7b, 0x03, 0x93, 0xef,
	0x56, 0x7d, 0xb9, 0xf5, 0x66, 0x30, 0x5f, 0xfd, 0xe2, 0xc8, 0xee, 0xb7, 0xa3, 0x14, 0xb6, 0x93,
	0xeb, 0x34, 0x8f, 0xff, 0xa8, 0xf0, 0x73, 0x80, 0x70, 0x9e, 0xf9, 0x79, 0x5a, 0xf8, 0xab, 0x88,
	0x2f, 0x4b, 0xb6, 0x2a, 0x97, 0x45, 0x2a, 0x97, 0x65, 0x03, 0xeb, 0x2b, 0xcb, 0xd5, 0x0f, 0xab,
	0x95, 0xed, 0xbe, 0x05, 0x98, 0x2c, 0x7e, 0x47, 0x61, 0xef, 0x1d, 0x55, 0xf6, 0xdf, 0xd1, 0xfe,
	0x17, 0x09, 0xda, 0x7e, 0xa9, 0x60, 0x26, 0xeb, 0x18, 0xb7, 0xa1, 0x35, 0x71, 0x2f, 0x5c, 0xef,
	0xd2, 0x45, 0x07, 0xf8, 0x08, 0xf4, 0xb1, 0x67, 0xd9, 0xee, 0x94, 0x98, 0xaf, 0x90, 0x84, 0x35,
	0x68, 0xf8, 0xb6, 0x6b, 0x21, 0x59, 0x9c, 0x3c, 0xd7, 0x42, 0x0a, 0x8f, 0x77, 0x02, 0x4b, 0x04,
	0x34, 0xf0, 0x31, 0x00, 0x07, 0xb6, 0x7b, 0xee, 0x11, 0x07, 0xa9, 0xf8, 0x04, 0xda, 0x9b, 0xcb,
	0x29, 0x31, 0x03, 0xd4, 0xac, 0x13, 0x83, 0xe1, 0x05, 0x6a, 0xe1, 0x7f, 0xe0, 0x84, 0x13, 0x81,
	0xe9, 0x8e, 0xa6, 0x81, 0xed, 0x5a, 0x63, 0x13, 0x69, 0x18, 0xc3, 0x71, 0x45, 0x5a, 0xc4, 0x9b,
	0xf8, 0x48, 0xc7, 0x08, 0x0e, 0x2b, 0x8e, 0x6b, 0x41, 0xbd, 0xb8, 0x00, 0xb5, 0xfb, 0x53, 0x68,
	0x3b, 0x6c, 0xaf, 0x8f, 0x91, 0x79, 0x3e, 0x98, 0x8c, 0x43, 0x74, 0xc0, 0xcb, 0x0d, 0xcd, 0x37,
	0x21, 0x92, 0xb0, 0x0e, 0xaa, 0xe9, 0x78, 0x2f, 0x6d, 0x24, 0xf3, 0x08, 0x7f, 0x12, 0xbc, 0x18,
	0x3a, 0x23, 0xa4, 0xe0, 0x16, 0x28, 0xb6, 0x63, 0xa1, 0x06, 0x0f, 0x78, 0xed, 0xd9, 0x43, 0x13,
	0xa9, 0x3c, 0x81, 0x38, 0x4e, 0x47, 0xbc, 0xf6, 0xfe, 0x53, 0x38, 0x1e, 0x55, 0xbf, 0x7d, 0x91,
	0xa3, 0x05, 0x4a, 0xe8, 0xf8, 0xe8, 0x80, 0x4b, 0x0d, 0xdc, 0x11, 0xf1, 0xec, 0x11, 0x92, 0x84,
	0x94, 0x17, 0x20, 0x19, 0x37, 0x41, 0xf6, 0x87, 0x48, 0xb9, 0x6a, 0x8a, 0x7f, 0xc0, 0x27, 0x5f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x88, 0x8a, 0x47, 0x13, 0x0d, 0x07, 0x00, 0x00,
}
